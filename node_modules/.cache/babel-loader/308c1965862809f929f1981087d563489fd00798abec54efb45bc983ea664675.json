{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Outputs.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Outputs = ({\n  grades\n}) => {\n  let totalGrade = 0;\n  let totalWeight = 0;\n  grades.forEach(({\n    grade,\n    weight\n  }) => {\n    const numericGrade = parseFloat(grade);\n    const numericWeight = parseFloat(weight);\n\n    // Check if both grade and weight are valid numbers\n    if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n      // Add the contribution of this assignment to the total\n      gradeSum += numericGrade * numericWeight;\n      weightSum += numericWeight;\n    }\n  });\n  const averageGrade = totalGrade / totalWeight;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"outputs\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your Grades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"outputs--element\",\n      children: [\"Average Grade:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: [averageGrade.toFixed(2), \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"outputs--element\",\n      children: [\"Total Weight:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: [totalWeight.toFixed(2), \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = Outputs;\nexport default Outputs;\nvar _c;\n$RefreshReg$(_c, \"Outputs\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Outputs","grades","totalGrade","totalWeight","forEach","grade","weight","numericGrade","parseFloat","numericWeight","isNaN","gradeSum","weightSum","averageGrade","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","toFixed","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Outputs.jsx"],"sourcesContent":["import React from \"react\";\n\nconst Outputs = ({ grades }) => {\n  let totalGrade = 0;\n  let totalWeight = 0;\n  grades.forEach(({ grade, weight }) => {\n    const numericGrade = parseFloat(grade);\n    const numericWeight = parseFloat(weight);\n\n    // Check if both grade and weight are valid numbers\n    if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n      // Add the contribution of this assignment to the total\n      gradeSum += numericGrade * numericWeight;\n      weightSum += numericWeight;\n    }\n  });\n  const averageGrade = totalGrade / totalWeight;\n\n  return (\n    <section className=\"outputs\">\n      <h3>Your Grades</h3>\n      <p className=\"outputs--element\">\n        Average Grade:{\" \"}\n        <span style={{ fontWeight: \"bold\" }}>{averageGrade.toFixed(2)} %</span>\n      </p>\n      <p className=\"outputs--element\">\n        Total Weight:{\" \"}\n        <span style={{ fontWeight: \"bold\" }}>{totalWeight.toFixed(2)} %</span>\n      </p>\n    </section>\n  );\n};\n\nexport default Outputs;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAC9B,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,WAAW,GAAG,CAAC;EACnBF,MAAM,CAACG,OAAO,CAAC,CAAC;IAAEC,KAAK;IAAEC;EAAO,CAAC,KAAK;IACpC,MAAMC,YAAY,GAAGC,UAAU,CAACH,KAAK,CAAC;IACtC,MAAMI,aAAa,GAAGD,UAAU,CAACF,MAAM,CAAC;;IAExC;IACA,IAAI,CAACI,KAAK,CAACH,YAAY,CAAC,IAAI,CAACG,KAAK,CAACD,aAAa,CAAC,EAAE;MACjD;MACAE,QAAQ,IAAIJ,YAAY,GAAGE,aAAa;MACxCG,SAAS,IAAIH,aAAa;IAC5B;EACF,CAAC,CAAC;EACF,MAAMI,YAAY,GAAGX,UAAU,GAAGC,WAAW;EAE7C,oBACEJ,OAAA;IAASe,SAAS,EAAC,SAAS;IAAAC,QAAA,gBAC1BhB,OAAA;MAAAgB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBpB,OAAA;MAAGe,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAAC,gBAChB,EAAC,GAAG,eAClBhB,OAAA;QAAMqB,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAO,CAAE;QAAAN,QAAA,GAAEF,YAAY,CAACS,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,eACJpB,OAAA;MAAGe,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAAC,eACjB,EAAC,GAAG,eACjBhB,OAAA;QAAMqB,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAO,CAAE;QAAAN,QAAA,GAAEZ,WAAW,CAACmB,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEd,CAAC;AAACI,EAAA,GA7BIvB,OAAO;AA+Bb,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}