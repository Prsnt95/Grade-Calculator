{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Table.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  updateGrades\n}) => {\n  _s();\n  const [rows, setRows] = React.useState([{\n    key: 0,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 1,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 2,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }]);\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  const [calculateClicked, setCalculateClicked] = React.useState(false);\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n    rows.forEach(({\n      grade,\n      weight\n    }) => {\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n    const finalAvg = gradeSum / weightSum;\n\n    // Update state only when the button is clicked\n    if (calculateClicked) {\n      setTotalGrade(finalAvg);\n      setTotalWeight(weightSum);\n    }\n  }\n  const handleInputChange = (index, e) => {\n    const {\n      name,\n      value\n    } = e.target;\n    setRows(prev => {\n      const updatedRows = [...prev];\n      updatedRows[index] = {\n        ...updatedRows[index],\n        [name]: value\n      };\n\n      // Call updateGrades with the updated rows\n      updateGrades(updatedRows);\n      return updatedRows;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"Row--inputs\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"calculate\",\n      onClick: () => setCalculateClicked(true),\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), calculateClicked && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"totalGrade: \", totalGrade, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"totalWeight: \", totalWeight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"lgNe6tS+mLnc6F7Jse6llOHzn8E=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","Row","jsxDEV","_jsxDEV","Fragment","_Fragment","Table","updateGrades","_s","rows","setRows","useState","key","grade","assignment","weight","totalGrade","setTotalGrade","totalWeight","setTotalWeight","calculateClicked","setCalculateClicked","handleCalculation","gradeSum","weightSum","forEach","numericGrade","parseFloat","numericWeight","isNaN","finalAvg","handleInputChange","index","e","name","value","target","prev","updatedRows","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Table.jsx"],"sourcesContent":["import React from \"react\";\nimport Row from \"./Row\";\n\nconst Table = ({ updateGrades }) => {\n  const [rows, setRows] = React.useState([\n    { key: 0, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 1, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 2, grade: \"\", assignment: \"\", weight: \"\" },\n  ]);\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  const [calculateClicked, setCalculateClicked] = React.useState(false);\n\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    rows.forEach(({ grade, weight }) => {\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n\n    const finalAvg = gradeSum / weightSum;\n\n    // Update state only when the button is clicked\n    if (calculateClicked) {\n      setTotalGrade(finalAvg);\n      setTotalWeight(weightSum);\n    }\n  }\n\n  const handleInputChange = (index, e) => {\n    const { name, value } = e.target;\n    setRows((prev) => {\n      const updatedRows = [...prev];\n      updatedRows[index] = { ...updatedRows[index], [name]: value };\n\n      // Call updateGrades with the updated rows\n      updateGrades(updatedRows);\n\n      return updatedRows;\n    });\n  };\n\n  return (\n    <section className=\"Row--inputs\">\n      <table>{/* Table content */}</table>\n      <button className=\"calculate\" onClick={() => setCalculateClicked(true)}>\n        Calculate\n      </button>\n\n      {calculateClicked && (\n        <>\n          <p>totalGrade: {totalGrade} </p>\n          <p>totalWeight: {totalWeight}</p>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default Table;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExB,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAC,CACrC;IAAEC,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE,EAAE;IAAEC,UAAU,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAG,CAAC,EACjD;IAAEH,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE,EAAE;IAAEC,UAAU,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAG,CAAC,EACjD;IAAEH,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE,EAAE;IAAEC,UAAU,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAG,CAAC,CAClD,CAAC;EACF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGjB,KAAK,CAACW,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGnB,KAAK,CAACW,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,KAAK,CAACW,QAAQ,CAAC,KAAK,CAAC;EAErE,SAASW,iBAAiBA,CAAA,EAAG;IAC3B,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,SAAS,GAAG,CAAC;IAEjBf,IAAI,CAACgB,OAAO,CAAC,CAAC;MAAEZ,KAAK;MAAEE;IAAO,CAAC,KAAK;MAClC,MAAMW,YAAY,GAAGC,UAAU,CAACd,KAAK,CAAC;MACtC,MAAMe,aAAa,GAAGD,UAAU,CAACZ,MAAM,CAAC;MAExC,IAAI,CAACc,KAAK,CAACH,YAAY,CAAC,IAAI,CAACG,KAAK,CAACD,aAAa,CAAC,EAAE;QACjDL,QAAQ,IAAIG,YAAY,GAAGE,aAAa;QACxCJ,SAAS,IAAII,aAAa;MAC5B;IACF,CAAC,CAAC;IAEF,MAAME,QAAQ,GAAGP,QAAQ,GAAGC,SAAS;;IAErC;IACA,IAAIJ,gBAAgB,EAAE;MACpBH,aAAa,CAACa,QAAQ,CAAC;MACvBX,cAAc,CAACK,SAAS,CAAC;IAC3B;EACF;EAEA,MAAMO,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,CAAC,KAAK;IACtC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChC1B,OAAO,CAAE2B,IAAI,IAAK;MAChB,MAAMC,WAAW,GAAG,CAAC,GAAGD,IAAI,CAAC;MAC7BC,WAAW,CAACN,KAAK,CAAC,GAAG;QAAE,GAAGM,WAAW,CAACN,KAAK,CAAC;QAAE,CAACE,IAAI,GAAGC;MAAM,CAAC;;MAE7D;MACA5B,YAAY,CAAC+B,WAAW,CAAC;MAEzB,OAAOA,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEnC,OAAA;IAASoC,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC9BrC,OAAA;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAmC,CAAC,eACpCzC,OAAA;MAAQoC,SAAS,EAAC,WAAW;MAACM,OAAO,EAAEA,CAAA,KAAMxB,mBAAmB,CAAC,IAAI,CAAE;MAAAmB,QAAA,EAAC;IAExE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAERxB,gBAAgB,iBACfjB,OAAA,CAAAE,SAAA;MAAAmC,QAAA,gBACErC,OAAA;QAAAqC,QAAA,GAAG,cAAY,EAACxB,UAAU,EAAC,GAAC;MAAA;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAChCzC,OAAA;QAAAqC,QAAA,GAAG,eAAa,EAACtB,WAAW;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,eACjC,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEd,CAAC;AAACpC,EAAA,CA7DIF,KAAK;AAAAwC,EAAA,GAALxC,KAAK;AA+DX,eAAeA,KAAK;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}