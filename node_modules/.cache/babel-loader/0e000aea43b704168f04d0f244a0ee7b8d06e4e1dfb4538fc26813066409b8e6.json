{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Table.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = props => {\n  _s();\n  const [rows, setRows] = React.useState([{\n    key: 0,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 1,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 2,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }]);\n  let keyCounter = 3; // Initialize a counter variable\n\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n    rows.forEach(({\n      grade,\n      weight\n    }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n  function addRow() {\n    setRows(prev => [...prev, /*#__PURE__*/_jsxDEV(Table, {}, keyCounter++, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 33\n    }, this)]); // Increment the counter after using it\n  }\n  function deleteRow() {\n    setRows(prev => {\n      const updatedRows = [...prev];\n      updatedRows.pop();\n      return updatedRows;\n    });\n  }\n  const handleInputChange = (index, e) => {\n    const {\n      name,\n      value\n    } = e.target;\n    setRows(prev => {\n      const updatedRows = [...prev];\n      updatedRows[index] = {\n        ...updatedRows[index],\n        [name]: value\n      };\n      props.update(updatedRows);\n      return updatedRows;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"Row--inputs\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Assignment (optional) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Grade %\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Weight %\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rows.map(({\n          key,\n          grade,\n          assignment,\n          weight\n        }, index) => /*#__PURE__*/_jsxDEV(Row, {\n          grade: grade,\n          assignment: assignment,\n          weight: weight,\n          handleInputChange: e => handleInputChange(index, e)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addRow\",\n      onClick: addRow,\n      children: \"+ Add row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addRow\",\n      onClick: deleteRow,\n      children: \"Delete Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"calculate\",\n      onClick: handleCalculation,\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"totalGrade: \", totalGrade, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"totalWeight: \", totalWeight]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"LYWYIuvEMw/eqeEmRksbFJ8Oq/Q=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","Row","jsxDEV","_jsxDEV","Table","props","_s","rows","setRows","useState","key","grade","assignment","weight","keyCounter","totalGrade","setTotalGrade","totalWeight","setTotalWeight","handleCalculation","gradeSum","weightSum","forEach","numericGrade","parseFloat","numericWeight","isNaN","finalAvg","addRow","prev","fileName","_jsxFileName","lineNumber","columnNumber","deleteRow","updatedRows","pop","handleInputChange","index","e","name","value","target","update","className","children","map","onClick","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Table.jsx"],"sourcesContent":["import React from \"react\";\nimport Row from \"./Row\";\n\nconst Table = (props) => {\n  const [rows, setRows] = React.useState([\n    { key: 0, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 1, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 2, grade: \"\", assignment: \"\", weight: \"\" },\n  ]);\n  let keyCounter = 3; // Initialize a counter variable\n\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    rows.forEach(({ grade, weight }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n\n  function addRow() {\n    setRows((prev) => [...prev, <Table key={keyCounter++} />]); // Increment the counter after using it\n  }\n  function deleteRow() {\n    setRows((prev) => {\n      const updatedRows = [...prev];\n      updatedRows.pop();\n      return updatedRows;\n    });\n  }\n\n  const handleInputChange = (index, e) => {\n    const { name, value } = e.target;\n    setRows((prev) => {\n      const updatedRows = [...prev];\n      updatedRows[index] = { ...updatedRows[index], [name]: value };\n\n      props.update(updatedRows);\n      return updatedRows;\n    });\n  };\n\n  return (\n    <section className=\"Row--inputs\">\n      <table>\n        <thead>\n          <tr>\n            <th>Assignment (optional) </th>\n            <th>Grade %</th>\n            <th>Weight %</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({ key, grade, assignment, weight }, index) => (\n            <Row\n              key={key}\n              grade={grade}\n              assignment={assignment}\n              weight={weight}\n              handleInputChange={(e) => handleInputChange(index, e)}\n            />\n          ))}\n        </tbody>\n      </table>\n      <button className=\"addRow\" onClick={addRow}>\n        + Add row\n      </button>\n      <button className=\"addRow\" onClick={deleteRow}>\n        Delete Row\n      </button>\n      <button className=\"calculate\" onClick={handleCalculation}>\n        Calculate\n      </button>\n\n      <p>totalGrade: {totalGrade} </p>\n      <p>totalWeight: {totalWeight}</p>\n    </section>\n  );\n};\n\nexport default Table;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}