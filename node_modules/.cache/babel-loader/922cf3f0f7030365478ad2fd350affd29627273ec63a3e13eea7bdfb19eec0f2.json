{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Inputs.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Table from \"./Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inputs = ({\n  updateGrades\n}) => {\n  _s();\n  const [tableData, setTableData] = React.useState();\n\n  // Initialize extraField state as an empty object\n  const [extraField, setExtraField] = React.useState({});\n\n  // Handle input change for extraField\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setExtraField(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n    rows.forEach(({\n      grade,\n      weight\n    }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    updateGrades(rows);\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Grade type Percentage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      updateGrades: updateGrades,\n      tableData: tableData,\n      setTableData: setTableData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-div--extra\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"Find additional grade needed to get average grade of (assumes weights in %)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"boldText\",\n          children: \"Optional\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"additionalGrade\",\n          placeholder: \"80\",\n          type: \"number\",\n          name: \"extra\" // Use \"extra\" as the name for the input field\n          ,\n          value: extraField.extra // Access extraField.extra for the value\n          ,\n          onChange: handleInputChange,\n          style: {\n            width: \"50px\"\n          } // Set a fixed width\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"calculate\",\n        onClick: handleCalculation,\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Inputs, \"dKlK8L7Jkf6yZ8YSmUtFUs0RFxg=\");\n_c = Inputs;\nexport default Inputs;\nvar _c;\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","Inputs","updateGrades","_s","tableData","setTableData","useState","extraField","setExtraField","handleInputChange","e","name","value","target","prev","totalGrade","setTotalGrade","totalWeight","setTotalWeight","handleCalculation","gradeSum","weightSum","rows","forEach","grade","weight","numericGrade","parseFloat","numericWeight","isNaN","finalAvg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","type","extra","onChange","style","width","onClick","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Inputs.jsx"],"sourcesContent":["import React from \"react\";\nimport Table from \"./Table\";\n\nconst Inputs = ({ updateGrades }) => {\n  const [tableData, setTableData] = React.useState();\n\n  // Initialize extraField state as an empty object\n  const [extraField, setExtraField] = React.useState({});\n\n  // Handle input change for extraField\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setExtraField((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    rows.forEach(({ grade, weight }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    updateGrades(rows);\n\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n\n  return (\n    <div className=\"input-div\">\n      <h2>Grade type Percentage</h2>\n      <Table\n        updateGrades={updateGrades}\n        tableData={tableData}\n        setTableData={setTableData}\n      />\n      <div className=\"input-div--extra\">\n        <p>\n          {\" \"}\n          Find additional grade needed to get average grade of (assumes weights\n          in %)\n          <br />\n          <span className=\"boldText\">Optional</span>\n        </p>\n        <span>\n          <input\n            className=\"additionalGrade\"\n            placeholder=\"80\"\n            type=\"number\"\n            name=\"extra\" // Use \"extra\" as the name for the input field\n            value={extraField.extra} // Access extraField.extra for the value\n            onChange={handleInputChange}\n            style={{ width: \"50px\" }} // Set a fixed width\n          ></input>\n          %\n        </span>\n        <button className=\"calculate\" onClick={handleCalculation}>\n          Calculate\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Inputs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}