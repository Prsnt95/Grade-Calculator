{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Row.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport Table from \"./Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Row = () => {\n  _s();\n  const [rows, setRows] = React.useState(() => {\n    const storedRows = localStorage.getItem(\"rows\");\n    return storedRows ? JSON.parse(storedRows) : [{\n      key: 0,\n      grade: \"\",\n      assignment: \"\",\n      weight: \"\"\n    }, {\n      key: 1,\n      grade: \"\",\n      assignment: \"\",\n      weight: \"\"\n    }, {\n      key: 2,\n      grade: \"\",\n      assignment: \"\",\n      weight: \"\"\n    }];\n  });\n  let keyCounter = 3; // Initialize a counter variable\n\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  useEffect(() => {\n    localStorage.setItem(\"rows\", JSON.stringify(rows));\n  }, [rows]);\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n    rows.forEach(({\n      grade,\n      weight\n    }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n  function addRow() {\n    setRows(prev => [...prev, /*#__PURE__*/_jsxDEV(Table, {}, keyCounter++, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 33\n    }, this)]); // Increment the counter after using it\n  }\n  function deleteRow() {\n    setRows(prev => {\n      const updatedRows = [...prev];\n      updatedRows.pop();\n      return updatedRows;\n    });\n  }\n  const handleInputChange = (index, e) => {\n    const {\n      name,\n      value\n    } = e.target;\n    setRows(prev => {\n      const updatedRows = [...prev];\n      updatedRows[index] = {\n        ...updatedRows[index],\n        [name]: value\n      };\n      return updatedRows;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"Row--inputs\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Assignment (optional) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Grade %\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Weight %\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rows.map(({\n          key,\n          grade,\n          assignment,\n          weight\n        }, index) => /*#__PURE__*/_jsxDEV(Table, {\n          grade: grade,\n          assignment: assignment,\n          weight: weight,\n          handleInputChange: e => handleInputChange(index, e)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addRow\",\n      onClick: addRow,\n      children: \"+ Add row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addRow\",\n      onClick: deleteRow,\n      children: \"Delete Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"calculate\",\n      onClick: handleCalculation,\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"totalGrade: \", totalGrade, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"totalWeight: \", totalWeight]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Row, \"O1MKsci77qnCvY4lpWDRHPej+9M=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","Table","jsxDEV","_jsxDEV","Row","_s","rows","setRows","useState","storedRows","localStorage","getItem","JSON","parse","key","grade","assignment","weight","keyCounter","totalGrade","setTotalGrade","totalWeight","setTotalWeight","setItem","stringify","handleCalculation","gradeSum","weightSum","forEach","numericGrade","parseFloat","numericWeight","isNaN","finalAvg","addRow","prev","fileName","_jsxFileName","lineNumber","columnNumber","deleteRow","updatedRows","pop","handleInputChange","index","e","name","value","target","className","children","map","onClick","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Row.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Table from \"./Table\";\n\nconst Row = () => {\n  const [rows, setRows] = React.useState(() => {\n    const storedRows = localStorage.getItem(\"rows\");\n    return storedRows\n      ? JSON.parse(storedRows)\n      : [\n          { key: 0, grade: \"\", assignment: \"\", weight: \"\" },\n          { key: 1, grade: \"\", assignment: \"\", weight: \"\" },\n          { key: 2, grade: \"\", assignment: \"\", weight: \"\" },\n        ];\n  });\n  let keyCounter = 3; // Initialize a counter variable\n\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n\n  useEffect(() => {\n    localStorage.setItem(\"rows\", JSON.stringify(rows));\n  }, [rows]);\n\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    rows.forEach(({ grade, weight }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n\n  function addRow() {\n    setRows((prev) => [...prev, <Table key={keyCounter++} />]); // Increment the counter after using it\n  }\n  function deleteRow() {\n    setRows((prev) => {\n      const updatedRows = [...prev];\n      updatedRows.pop();\n      return updatedRows;\n    });\n  }\n\n  const handleInputChange = (index, e) => {\n    const { name, value } = e.target;\n    setRows((prev) => {\n      const updatedRows = [...prev];\n      updatedRows[index] = { ...updatedRows[index], [name]: value };\n      return updatedRows;\n    });\n  };\n\n  return (\n    <section className=\"Row--inputs\">\n      <table>\n        <thead>\n          <tr>\n            <th>Assignment (optional) </th>\n            <th>Grade %</th>\n            <th>Weight %</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({ key, grade, assignment, weight }, index) => (\n            <Table\n              key={key}\n              grade={grade}\n              assignment={assignment}\n              weight={weight}\n              handleInputChange={(e) => handleInputChange(index, e)}\n            />\n          ))}\n        </tbody>\n      </table>\n      <button className=\"addRow\" onClick={addRow}>\n        + Add row\n      </button>\n      <button className=\"addRow\" onClick={deleteRow}>\n        Delete Row\n      </button>\n      <button className=\"calculate\" onClick={handleCalculation}>\n        Calculate\n      </button>\n\n      <p>totalGrade: {totalGrade} </p>\n      <p>totalWeight: {totalWeight}</p>\n    </section>\n  );\n};\n\nexport default Row;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}