{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/react/react-web/src/components/Inputs.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inputs = () => {\n  _s();\n  const [rowNum, setRowNum] = React.useState([/*#__PURE__*/_jsxDEV(Row, {}, 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 47\n  }, this)]);\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    // Iterate over rows to calculate totals\n    rowNum.forEach(row => {\n      // Access grade and weight from each row\n      const {\n        grade,\n        weight\n      } = row.props;\n\n      // Convert to numbers and add to sum\n      if (!isNaN(parseFloat(grade))) {\n        gradeSum += parseFloat(grade);\n      }\n      if (!isNaN(parseFloat(weight))) {\n        weightSum += parseFloat(weight);\n      }\n    });\n\n    // Set the total grade and weight\n    setTotalGrade(gradeSum);\n    setTotalWeight(weightSum);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Grade type Percentage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), rowNum, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-div--extra\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"Find additional grade needed to get average grade of (assumes weights in %)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"boldText\",\n          children: \"Optional\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"addtionalGrade\",\n          placeholder: \"80\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"calculate\",\n        onClick: handleCalculation,\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Inputs, \"TCjDJ4RUZrhRjBL67Q5/Aq/S/9U=\");\n_c = Inputs;\nexport default Inputs;\nvar _c;\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"names":["React","Row","jsxDEV","_jsxDEV","Inputs","_s","rowNum","setRowNum","useState","fileName","_jsxFileName","lineNumber","columnNumber","totalGrade","setTotalGrade","totalWeight","setTotalWeight","handleCalculation","gradeSum","weightSum","forEach","row","grade","weight","props","isNaN","parseFloat","className","children","placeholder","type","onClick","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/react/react-web/src/components/Inputs.jsx"],"sourcesContent":["import React from \"react\";\nimport Row from \"./Row\";\n\nconst Inputs = () => {\n  const [rowNum, setRowNum] = React.useState([<Row key={0} />]);\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    // Iterate over rows to calculate totals\n    rowNum.forEach((row) => {\n      // Access grade and weight from each row\n      const { grade, weight } = row.props;\n\n      // Convert to numbers and add to sum\n      if (!isNaN(parseFloat(grade))) {\n        gradeSum += parseFloat(grade);\n      }\n      if (!isNaN(parseFloat(weight))) {\n        weightSum += parseFloat(weight);\n      }\n    });\n\n    // Set the total grade and weight\n    setTotalGrade(gradeSum);\n    setTotalWeight(weightSum);\n  }\n\n  return (\n    <div className=\"input-div\">\n      <h2>Grade type Percentage</h2>\n      {rowNum}\n      <div className=\"input-div--extra\">\n        <p>\n          {\" \"}\n          Find additional grade needed to get average grade of (assumes weights\n          in %)\n          <br />\n          <span className=\"boldText\">Optional</span>\n        </p>\n        <span>\n          <input\n            className=\"addtionalGrade\"\n            placeholder=\"80\"\n            type=\"number\"\n          ></input>\n          %\n        </span>\n        <button className=\"calculate\" onClick={handleCalculation}>\n          Calculate\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Inputs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}