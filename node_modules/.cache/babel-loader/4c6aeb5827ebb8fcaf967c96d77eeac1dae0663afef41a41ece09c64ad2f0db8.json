{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Outputs.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Outputs = ({\n  grades\n}) => {\n  var _s = $RefreshSig$();\n  let totalGrade = 0;\n  let totalWeight = 0;\n  _s(grades.forEach(_s(({\n    grade,\n    weight\n  }) => {\n    _s();\n    // Parse grade and weight as numbers\n    const [totalGrade, setTotalGrade] = React.useState(0);\n    const [totalWeight, setTotalWeight] = React.useState(0);\n\n    // Check if both grade and weight are valid numbers\n    if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n      // Add the contribution of this assignment to the total\n      gradeSum += numericGrade * numericWeight;\n      weightSum += numericWeight;\n    }\n  }, \"IXL+jV5nv/bGovZIDrj7R4Bvi8A=\")), \"IXL+jV5nv/bGovZIDrj7R4Bvi8A=\");\n  const averageGrade = totalGrade / totalWeight;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"outputs\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your Grades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"outputs--element\",\n      children: [\"Average Grade:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: [averageGrade.toFixed(2), \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"outputs--element\",\n      children: [\"Total Weight:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: [totalWeight.toFixed(2), \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = Outputs;\nexport default Outputs;\nvar _c;\n$RefreshReg$(_c, \"Outputs\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Outputs","grades","_s","$RefreshSig$","totalGrade","totalWeight","forEach","grade","weight","setTotalGrade","useState","setTotalWeight","isNaN","numericGrade","numericWeight","gradeSum","weightSum","averageGrade","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","toFixed","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Outputs.jsx"],"sourcesContent":["import React from \"react\";\n\nconst Outputs = ({ grades }) => {\n  let totalGrade = 0;\n  let totalWeight = 0;\n  grades.forEach(({ grade, weight }) => {\n    // Parse grade and weight as numbers\n    const [totalGrade, setTotalGrade] = React.useState(0);\n    const [totalWeight, setTotalWeight] = React.useState(0);\n\n    // Check if both grade and weight are valid numbers\n    if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n      // Add the contribution of this assignment to the total\n      gradeSum += numericGrade * numericWeight;\n      weightSum += numericWeight;\n    }\n  });\n  const averageGrade = totalGrade / totalWeight;\n\n  return (\n    <section className=\"outputs\">\n      <h3>Your Grades</h3>\n      <p className=\"outputs--element\">\n        Average Grade:{\" \"}\n        <span style={{ fontWeight: \"bold\" }}>{averageGrade.toFixed(2)} %</span>\n      </p>\n      <p className=\"outputs--element\">\n        Total Weight:{\" \"}\n        <span style={{ fontWeight: \"bold\" }}>{totalWeight.toFixed(2)} %</span>\n      </p>\n    </section>\n  );\n};\n\nexport default Outputs;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC9B,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,WAAW,GAAG,CAAC;EACnBH,EAAA,CAAAD,MAAM,CAACK,OAAO,CAAAJ,EAAA,CAAC,CAAC;IAAEK,KAAK;IAAEC;EAAO,CAAC,KAAK;IAAAN,EAAA;IACpC;IACA,MAAM,CAACE,UAAU,EAAEK,aAAa,CAAC,GAAGZ,KAAK,CAACa,QAAQ,CAAC,CAAC,CAAC;IACrD,MAAM,CAACL,WAAW,EAAEM,cAAc,CAAC,GAAGd,KAAK,CAACa,QAAQ,CAAC,CAAC,CAAC;;IAEvD;IACA,IAAI,CAACE,KAAK,CAACC,YAAY,CAAC,IAAI,CAACD,KAAK,CAACE,aAAa,CAAC,EAAE;MACjD;MACAC,QAAQ,IAAIF,YAAY,GAAGC,aAAa;MACxCE,SAAS,IAAIF,aAAa;IAC5B;EACF,CAAC,kCAAC;EACF,MAAMG,YAAY,GAAGb,UAAU,GAAGC,WAAW;EAE7C,oBACEN,OAAA;IAASmB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBAC1BpB,OAAA;MAAAoB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBxB,OAAA;MAAGmB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAAC,gBAChB,EAAC,GAAG,eAClBpB,OAAA;QAAMyB,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAO,CAAE;QAAAN,QAAA,GAAEF,YAAY,CAACS,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,eACJxB,OAAA;MAAGmB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAAC,eACjB,EAAC,GAAG,eACjBpB,OAAA;QAAMyB,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAO,CAAE;QAAAN,QAAA,GAAEd,WAAW,CAACqB,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEd,CAAC;AAACI,EAAA,GA9BI3B,OAAO;AAgCb,eAAeA,OAAO;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}