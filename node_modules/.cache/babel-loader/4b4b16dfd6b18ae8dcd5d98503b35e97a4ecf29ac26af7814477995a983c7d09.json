{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/react/react-web/src/components/Inputs.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inputs = () => {\n  _s();\n  const [rows, setRows] = useState([{\n    key: 0,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 1,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 2,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }]);\n  const [totalGrade, setTotalGrade] = useState(0);\n  const [totalWeight, setTotalWeight] = useState(0);\n  const handleCalculation = () => {\n    let gradeSum = 0;\n    let weightSum = 0;\n    rows.forEach(({\n      grade,\n      weight\n    }) => {\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n    const finalAvg = gradeSum / weightSum || 0; // Avoid division by zero\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  };\n  const addRow = () => {\n    setRows(prevRows => [...prevRows, {\n      key: Date.now(),\n      grade: \"\",\n      assignment: \"\",\n      weight: \"\"\n    }]);\n  };\n  const deleteRow = () => {\n    setRows(prevRows => {\n      const updatedRows = [...prevRows];\n      updatedRows.pop();\n      return updatedRows;\n    });\n  };\n  const handleGradeChange = (index, value) => {\n    setRows(prevRows => {\n      const updatedRows = [...prevRows];\n      updatedRows[index].grade = value;\n      return updatedRows;\n    });\n  };\n  const handleInputChange = (index, e) => {\n    const {\n      name,\n      value\n    } = e.target;\n    setRows(prevRows => {\n      const updatedRows = [...prevRows];\n      updatedRows[index] = {\n        ...updatedRows[index],\n        [name]: value\n      };\n      return updatedRows;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Grade type Percentage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), rows, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-div--extra\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"Find additional grade needed to get average grade of (assumes weights in %)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"boldText\",\n          children: \"Optional\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"addtionalGrade\",\n          placeholder: \"80\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Inputs, \"LYWYIuvEMw/eqeEmRksbFJ8Oq/Q=\");\n_c = Inputs;\nexport default Inputs;\nvar _c;\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"names":["React","useState","Row","jsxDEV","_jsxDEV","Inputs","_s","rows","setRows","key","grade","assignment","weight","totalGrade","setTotalGrade","totalWeight","setTotalWeight","handleCalculation","gradeSum","weightSum","forEach","numericGrade","parseFloat","numericWeight","isNaN","finalAvg","addRow","prevRows","Date","now","deleteRow","updatedRows","pop","handleGradeChange","index","value","handleInputChange","e","name","target","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/react/react-web/src/components/Inputs.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Row from \"./Row\";\n\nconst Inputs = () => {\n  const [rows, setRows] = useState([\n    { key: 0, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 1, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 2, grade: \"\", assignment: \"\", weight: \"\" },\n  ]);\n  const [totalGrade, setTotalGrade] = useState(0);\n  const [totalWeight, setTotalWeight] = useState(0);\n\n  const handleCalculation = () => {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    rows.forEach(({ grade, weight }) => {\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n\n    const finalAvg = gradeSum / weightSum || 0; // Avoid division by zero\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  };\n\n  const addRow = () => {\n    setRows((prevRows) => [\n      ...prevRows,\n      { key: Date.now(), grade: \"\", assignment: \"\", weight: \"\" },\n    ]);\n  };\n\n  const deleteRow = () => {\n    setRows((prevRows) => {\n      const updatedRows = [...prevRows];\n      updatedRows.pop();\n      return updatedRows;\n    });\n  };\n\n  const handleGradeChange = (index, value) => {\n    setRows((prevRows) => {\n      const updatedRows = [...prevRows];\n      updatedRows[index].grade = value;\n      return updatedRows;\n    });\n  };\n\n  const handleInputChange = (index, e) => {\n    const { name, value } = e.target;\n    setRows((prevRows) => {\n      const updatedRows = [...prevRows];\n      updatedRows[index] = { ...updatedRows[index], [name]: value };\n      return updatedRows;\n    });\n  };\n\n  return (\n    <div className=\"input-div\">\n      <h2>Grade type Percentage</h2>\n      {rows}\n      <div className=\"input-div--extra\">\n        <p>\n          {\" \"}\n          Find additional grade needed to get average grade of (assumes weights\n          in %)\n          <br />\n          <span className=\"boldText\">Optional</span>\n        </p>\n        <span>\n          <input\n            className=\"addtionalGrade\"\n            placeholder=\"80\"\n            type=\"number\"\n          ></input>\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Inputs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}