{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Outputs.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Outputs = ({\n  grades\n}) => {\n  _s();\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  React.useEffect(() => {\n    let gradeSum = 0;\n    let weightSum = 0;\n    grades.forEach(({\n      grade,\n      weight\n    }) => {\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n    setTotalGrade(gradeSum);\n    setTotalWeight(weightSum);\n  }, [grades]);\n  const averageGrade = totalWeight !== 0 ? totalGrade / totalWeight : 0;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"outputs\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your Grades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"outputs--element\",\n      children: [\"Average Grade:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: [averageGrade.toFixed(2), \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"outputs--element\",\n      children: [\"Total Weight:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: [totalWeight.toFixed(2), \" %\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Outputs, \"OPviHcVKoQtEN3MJyRPI1xB77jY=\");\n_c = Outputs;\nexport default Outputs;\nvar _c;\n$RefreshReg$(_c, \"Outputs\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Outputs","grades","_s","totalGrade","setTotalGrade","useState","totalWeight","setTotalWeight","useEffect","gradeSum","weightSum","forEach","grade","weight","numericGrade","parseFloat","numericWeight","isNaN","averageGrade","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","toFixed","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Outputs.jsx"],"sourcesContent":["import React from \"react\";\n\nconst Outputs = ({ grades }) => {\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n\n  React.useEffect(() => {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    grades.forEach(({ grade, weight }) => {\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n\n    setTotalGrade(gradeSum);\n    setTotalWeight(weightSum);\n  }, [grades]);\n\n  const averageGrade = totalWeight !== 0 ? totalGrade / totalWeight : 0;\n\n  return (\n    <section className=\"outputs\">\n      <h3>Your Grades</h3>\n      <p className=\"outputs--element\">\n        Average Grade:{\" \"}\n        <span style={{ fontWeight: \"bold\" }}>{averageGrade.toFixed(2)} %</span>\n      </p>\n      <p className=\"outputs--element\">\n        Total Weight:{\" \"}\n        <span style={{ fontWeight: \"bold\" }}>{totalWeight.toFixed(2)} %</span>\n      </p>\n    </section>\n  );\n};\n\nexport default Outputs;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC;EAEvDR,KAAK,CAACW,SAAS,CAAC,MAAM;IACpB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,SAAS,GAAG,CAAC;IAEjBT,MAAM,CAACU,OAAO,CAAC,CAAC;MAAEC,KAAK;MAAEC;IAAO,CAAC,KAAK;MACpC,MAAMC,YAAY,GAAGC,UAAU,CAACH,KAAK,CAAC;MACtC,MAAMI,aAAa,GAAGD,UAAU,CAACF,MAAM,CAAC;MAExC,IAAI,CAACI,KAAK,CAACH,YAAY,CAAC,IAAI,CAACG,KAAK,CAACD,aAAa,CAAC,EAAE;QACjDP,QAAQ,IAAIK,YAAY,GAAGE,aAAa;QACxCN,SAAS,IAAIM,aAAa;MAC5B;IACF,CAAC,CAAC;IAEFZ,aAAa,CAACK,QAAQ,CAAC;IACvBF,cAAc,CAACG,SAAS,CAAC;EAC3B,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC;EAEZ,MAAMiB,YAAY,GAAGZ,WAAW,KAAK,CAAC,GAAGH,UAAU,GAAGG,WAAW,GAAG,CAAC;EAErE,oBACEP,OAAA;IAASoB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBAC1BrB,OAAA;MAAAqB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBzB,OAAA;MAAGoB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAAC,gBAChB,EAAC,GAAG,eAClBrB,OAAA;QAAM0B,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAO,CAAE;QAAAN,QAAA,GAAEF,YAAY,CAACS,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,eACJzB,OAAA;MAAGoB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAAC,eACjB,EAAC,GAAG,eACjBrB,OAAA;QAAM0B,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAO,CAAE;QAAAN,QAAA,GAAEd,WAAW,CAACqB,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEd,CAAC;AAACtB,EAAA,CArCIF,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AAuCb,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}