{"ast":null,"code":"var _jsxFileName = \"/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Inputs.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inputs = () => {\n  _s();\n  const [rowNum, setRowNum] = React.useState({\n    key: 0,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 1,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  }, {\n    key: 2,\n    grade: \"\",\n    assignment: \"\",\n    weight: \"\"\n  });\n  let keyCounter = 3; // Initialize a counter variable\n\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n    rows.forEach(({\n      grade,\n      weight\n    }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n  const handleInputChange = (index, e) => {\n    const {\n      name,\n      value\n    } = e.target;\n    setRowNum(prev => {\n      const updatedRows = [...prev];\n      updatedRows[index] = {\n        ...updatedRows[index],\n        [name]: value\n      };\n      return updatedRows;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Grade type Percentage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), rowNum.map(({\n      key,\n      grade,\n      assignment,\n      weight\n    }, index) => /*#__PURE__*/_jsxDEV(Row, {\n      grade: grade,\n      assignment: assignment,\n      weight: weight,\n      handleInputChange: e => handleInputChange(index, e)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-div--extra\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"Find additional grade needed to get average grade of (assumes weights in %)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"boldText\",\n          children: \"Optional\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"addtionalGrade\",\n          placeholder: \"80\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Inputs, \"n1Qkhqih/hiiUd8RYNZkMr3H4cA=\");\n_c = Inputs;\nexport default Inputs;\nvar _c;\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"names":["React","Row","jsxDEV","_jsxDEV","Inputs","_s","rowNum","setRowNum","useState","key","grade","assignment","weight","keyCounter","totalGrade","setTotalGrade","totalWeight","setTotalWeight","handleCalculation","gradeSum","weightSum","rows","forEach","numericGrade","parseFloat","numericWeight","isNaN","finalAvg","handleInputChange","index","e","name","value","target","prev","updatedRows","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/prashant/Desktop/untitled folder/Github/Grade-Calculator/src/components/Inputs.jsx"],"sourcesContent":["import React from \"react\";\nimport Row from \"./Row\";\n\nconst Inputs = () => {\n  const [rowNum, setRowNum] = React.useState(\n    { key: 0, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 1, grade: \"\", assignment: \"\", weight: \"\" },\n    { key: 2, grade: \"\", assignment: \"\", weight: \"\" }\n  );\n\n  let keyCounter = 3; // Initialize a counter variable\n\n  const [totalGrade, setTotalGrade] = React.useState(0);\n  const [totalWeight, setTotalWeight] = React.useState(0);\n\n  function handleCalculation() {\n    let gradeSum = 0;\n    let weightSum = 0;\n\n    rows.forEach(({ grade, weight }) => {\n      // Parse grade and weight as numbers\n      const numericGrade = parseFloat(grade);\n      const numericWeight = parseFloat(weight);\n\n      // Check if both grade and weight are valid numbers\n      if (!isNaN(numericGrade) && !isNaN(numericWeight)) {\n        // Add the contribution of this assignment to the total\n        gradeSum += numericGrade * numericWeight;\n        weightSum += numericWeight;\n      }\n    });\n\n    let finalAvg = gradeSum / weightSum;\n    // Update the state with the calculated values\n    setTotalGrade(finalAvg);\n    setTotalWeight(weightSum);\n  }\n\n  const handleInputChange = (index, e) => {\n    const { name, value } = e.target;\n    setRowNum((prev) => {\n      const updatedRows = [...prev];\n      updatedRows[index] = { ...updatedRows[index], [name]: value };\n      return updatedRows;\n    });\n  };\n\n  return (\n    <div className=\"input-div\">\n      <h2>Grade type Percentage</h2>\n      {rowNum.map(({ key, grade, assignment, weight }, index) => (\n        <Row\n          key={key}\n          grade={grade}\n          assignment={assignment}\n          weight={weight}\n          handleInputChange={(e) => handleInputChange(index, e)}\n        />\n      ))}\n      <div className=\"input-div--extra\">\n        <p>\n          {\" \"}\n          Find additional grade needed to get average grade of (assumes weights\n          in %)\n          <br />\n          <span className=\"boldText\">Optional</span>\n        </p>\n        <span>\n          <input\n            className=\"addtionalGrade\"\n            placeholder=\"80\"\n            type=\"number\"\n          ></input>\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Inputs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}